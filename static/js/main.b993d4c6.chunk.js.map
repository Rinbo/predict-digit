{"version":3,"sources":["resources/T1.txt","resources/T2.txt","resources/T3.txt","utility/LoadMatrix.js","utility/pixelConverter.js","utility/pixelConstants.js","components/Canvas.js","utility/ForwardPropagation.js","components/BarChart.js","components/options.js","components/OutputCanvas.js","components/App.js","index.js"],"names":["module","exports","__webpack_require__","p","loadMatrix","file","getFile","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","input","response","text","trimmedString","outerArray","output","wrap","_context","prev","next","fetch","sent","trim","split","map","row","abrupt","t0","console","log","stop","_x","apply","this","arguments","scaler","imageArray","normalizedArray","e","Math","ceil","sixes","createMatrix","ORIGIN_PIXEL_COUNT","matrixRows","convertedPixelRow","i","j","length","concat","splice","matrix","takeSumAndNormalize","rotatedOutput","_loop","forEach","arr","push","flat","chunkSize","reduce","all","currentValue","index","chunk","floor","accum","Canvas","setImageData","setInputVector","setShowPrediction","_useState","useState","_useState2","slicedToArray","painting","setPainting","digitCanvas","useRef","ctx","useEffect","current","width","height","getContext","startPosition","pos","getMousePos","lineTo","x","y","stroke","finishedPosition","beginPath","parseImage","getImageData","rect","getBoundingClientRect","clientX","left","clientY","top","draw","lineWidth","lineCap","strokeStyle","moveTo","image","convertedImage","grayScaleArray","data","filter","scaledImage","toConsumableArray","imageData","Uint8ClampedArray","ImageData","convertPixels","react_default","createElement","className","style","ref","onMouseDown","onMouseUp","onMouseMove","onTouchStart","onTouchEnd","onTouchMove","margin","onClick","clearRect","scalarProduct","vector1","vector2","Error","result","relu","vector","element","softmax","maxValue","max","logVector","exp","sumOfLogVector","BarChart","xlabel","ylabel","maxY","prediction","es","labels","datasets","label","backgroundColor","borderColor","borderWidth","defaultFontColor","hoverBackgroundColor","hoverBorderColor","options","legend","display","scales","xAxes","gridLines","color","scaleLabel","labelString","yAxes","ticks","autoSkip","min","maintainAspectRatio","OutputCanvas","inputVector","thetaMatrices","showPrediction","setPrediction","matrices","unshift","A1","T1","v","A2","T2","T3","forwardPropagation","indexOf","components_BarChart","file1","require","file2","file3","App","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","setThetaMatrices","then","prevState","objectSpread","components_Canvas","components_OutputCanvas","ReactDOM","render","components_App","document","getElementById"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iMCA3BC,EAAa,SAAAC,GAExB,OADeC,EAAQD,IAInBC,EAAO,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,EAAAC,EAAAS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEWC,MAAMV,GAFjB,cAENC,EAFMM,EAAAI,KAAAJ,EAAAE,KAAA,EAGOR,EAASC,OAHhB,cAGNA,EAHMK,EAAAI,KAINR,EAAgBD,EAAKU,OACrBR,EAAaD,EAAcU,MAAM,MACjCR,EAASD,EAAWU,IAAI,SAAAC,GAAG,OAAIA,EAAIF,MAAM,OANnCN,EAAAS,OAAA,SAOLX,GAPK,cAAAE,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,SASZW,QAAQC,IAARZ,EAAAU,IATYV,EAAAU,GAAA,yBAAAV,EAAAa,SAAArB,EAAA,kBAAH,gBAAAsB,GAAA,OAAA5B,EAAA6B,MAAAC,KAAAC,YAAA,UCoBPC,EAAS,SAAAC,GA4Cb,IA3CA,IAAMC,EAAkBD,EAAWZ,IAAI,SAAAc,GAAC,OAAIC,KAAKC,KAAKF,EAAI,OAMpDG,EAAQC,EAAaL,EC9BDM,GDoCpBC,EAAaF,EAAaD,ECrCG,ID8C7B1B,EAFS2B,EAAaE,EC3CFD,GD6CJnB,IAAI,SAAAc,GAExB,IADA,IAAMO,EAAoB,GACjBC,EAAI,EAAGA,EAAI,GAAIA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAEU,OAAQD,IAC5BF,EAAkBC,GAAK,GAAGG,OACxBJ,EAAkBC,IAAM,GACxBR,EAAES,GAAGG,OAAO,EAAG,IAQrB,OAJoBL,EAAkBrB,IAAI,SAAA2B,GACxC,OAAOC,EAAoBD,OAUzBE,EAAgB,GA3CKC,EAAA,SA4ClBR,GACPO,EAAcP,GAAK,GACnB/B,EAAOwC,QAAQ,SAAAC,GACbH,EAAcP,GAAGW,KAAKD,EAAIV,OAHrBA,EAAI,EAAGA,EAAI,GAAIA,IAAKQ,EAApBR,GAMT,OAAOO,EAAcK,QAOjBhB,EAAe,SAACc,EAAKG,GACzB,OAAOH,EAAII,OAAO,SAACC,EAAKC,EAAcC,GACpC,IAAMC,EAAQzB,KAAK0B,MAAMF,EAAQJ,GAGjC,OAFKE,EAAIG,KAAQH,EAAIG,GAAS,IAC9BH,EAAIG,GAAOP,KAAKK,GACTD,GACN,KAOCT,EAAsB,SAAAI,GAQ1B,OAPgBA,EAAIhC,IAAI,SAAAc,GACtB,OAAOA,EAAEsB,OAAO,SAACM,EAAOJ,GAAR,OAAyBI,EAAQJ,MAE1BF,OACvB,SAACM,EAAOJ,GAAR,OAAyBI,EAAQJ,IAGjB,IEhBLK,EAnFA,SAAAhE,GAAyD,IAAtDiE,EAAsDjE,EAAtDiE,aAAcC,EAAwClE,EAAxCkE,eAAgBC,EAAwBnE,EAAxBmE,kBAAwBC,EACtCC,oBAAS,GAD6BC,EAAArE,OAAAsE,EAAA,EAAAtE,CAAAmE,EAAA,GAC/DI,EAD+DF,EAAA,GACrDG,EADqDH,EAAA,GAEhEI,EAAcC,iBAAO,MACrBC,EAAMD,iBAAO,MAEnBE,oBAAU,WACRH,EAAYI,QAAQC,MDVU,ICW9BL,EAAYI,QAAQE,ODXU,ICY9BJ,EAAIE,QAAUJ,EAAYI,QAAQG,WAAW,OAC5C,IAEH,IAAMC,EAAgB,SAAA/C,GACpBsC,GAAY,GACZ,IAAMU,EAAMC,EAAYjD,GACxByC,EAAIE,QAAQO,OAAOF,EAAIG,EAAGH,EAAII,GAC9BX,EAAIE,QAAQU,UAGRC,EAAmB,WACvBhB,GAAY,GACZG,EAAIE,QAAQY,YACZC,EACEf,EAAIE,QAAQc,aAAa,EAAG,ED1BA,WC8B1BR,EAAc,SAAAjD,GAClB,IAAM0D,EAAOnB,EAAYI,QAAQgB,wBACjC,MAAO,CACLR,EAAGnD,EAAE4D,QAAUF,EAAKG,KACpBT,EAAGpD,EAAE8D,QAAUJ,EAAKK,MAIlBC,EAAO,SAAAhE,GACX,GAAKqC,EAAL,CACA,IAAMW,EAAMC,EAAYjD,GACxByC,EAAIE,QAAQsB,UAAY,GACxBxB,EAAIE,QAAQuB,QAAU,QACtBzB,EAAIE,QAAQwB,YAAc,QAC1B1B,EAAIE,QAAQO,OAAOF,EAAIG,EAAGH,EAAII,GAC9BX,EAAIE,QAAQU,SACZZ,EAAIE,QAAQY,YACZd,EAAIE,QAAQyB,OAAOpB,EAAIG,EAAGH,EAAII,KAG1BI,EAAa,SAAAa,GACjB,IAAMC,EFjDmB,SAACD,EAAOtC,GACnC,IAAMwC,EAAiBF,EAAMG,KAAKC,OAAO,SAACzE,EAAGyB,GAAJ,OAAeA,EAAQ,GAAK,IAAM,IACrEiD,EAAc7E,EAAO/B,OAAA6G,EAAA,EAAA7G,CAAIyG,IAC/BxC,EAAe2C,GAMf,IADA,IAAMxD,EAAM,GACHV,EAAI,EAAGA,EAAIkE,EAAYhE,OAAQF,IACtC,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACX,IAANA,EACFS,EAAIC,KAAK,GAETD,EAAIC,KAAKuD,EAAYlE,IAI3B,IAAMoE,EAAY,IAAIC,kBAAkB3D,GAExC,OAAO,IAAI4D,UAAUF,ECrBc,OCkDVG,CAAcV,EAAOtC,GAC5CC,GAAkB,GAClBF,EAAawC,IAGf,OACEU,EAAA/G,EAAAgH,cAAA,OACEC,UAAU,+BACVC,MAAO,CAACtC,OAAQ,MAEhBmC,EAAA/G,EAAAgH,cAAA,UACEC,UAAU,WACVE,IAAK7C,EACL8C,YAAa,SAAArF,GAAC,OAAI+C,EAAc/C,IAChCsF,UAAW,kBAAMhC,KACjBiC,YAAa,SAAAvF,GAAC,OAAIgE,EAAKhE,IACvBwF,aAAc,SAAAxF,GAAC,OAAI+C,EAAc/C,IACjCyF,WAAY,kBAAMnC,KAClBoC,YAAa,SAAA1F,GAAC,OAAIgE,EAAKhE,MAEzBgF,EAAA/G,EAAAgH,cAAA,WACED,EAAA/G,EAAAgH,cAAA,UACEC,UAAU,gBACVC,MAAO,CAAEQ,OAAQ,IACjBC,QAAS,WACPnD,EAAIE,QAAQkD,UAAU,EAAG,ED5EH,SC6EtB7D,GAAkB,KALtB,YC1DF8D,EAAgB,SAACC,EAASC,GAC9B,GAAID,EAAQrF,SAAWsF,EAAQtF,OAC7B,MAAM,IAAIuF,MAAM,qCAIlB,IAFA,IAAIC,EAAS,EAEJ1F,EAAI,EAAGA,EAAIuF,EAAQrF,OAAQF,IAClC0F,GAAkBH,EAAQvF,GAAKwF,EAAQxF,GAEzC,OAAO0F,GAGHC,EAAO,SAAAC,GACX,OAAOA,EAAOlH,IAAI,SAAAmH,GAChB,OAAIA,EAAU,EAAUA,EACP,IAAVA,KAILC,EAAU,SAAAF,GACd,IAAMG,EAAWtG,KAAKuG,IAAL9G,MAAAO,KAAInC,OAAA6G,EAAA,EAAA7G,CAAQsI,IACvBK,EAAYL,EAAOlH,IAAI,SAAAmH,GAAO,OAAIpG,KAAKyG,IAAIL,EAAUE,KACrDI,EAAiBF,EAAUnF,OAC/B,SAACM,EAAOJ,GAAR,OAAyBI,EAAQJ,IAEnC,OAAOiF,EAAUvH,IAAI,SAAAmH,GAAO,OAAIA,EAAUM,aCR7BC,EA3BE,SAAA/I,GAAoB,ICJbgJ,EAAQC,EAAQC,EDIpBC,EAAiBnJ,EAAjBmJ,WAClB,OACEhC,EAAA/G,EAAAgH,cAACgC,EAAA,EAAD,CACEzC,KAAM,CACJ0C,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpCC,SAAU,CACR,CACEC,MAAO,cACPC,gBAAiB,sBACjBC,YAAa,oBACbC,YAAa,EACbC,iBAAkB,UAClBC,qBAAsB,sBACtBC,iBAAkB,oBAClBlD,KAAMwC,EAAW9H,IAAI,SAAAc,GAAC,OAAIC,KAAK0B,MAAU,IAAJ3B,QAI3C2H,SCtBkBd,EDuBhB,KCvBwBC,EDwBxB,KCxBgCC,EDyBhC9G,KAAKuG,IAAL9G,MAAAO,KAAInC,OAAA6G,EAAA,EAAA7G,CAAQkJ,EAAW9H,IAAI,SAAAc,GAAC,OAAIC,KAAK0B,MAAU,IAAJ3B,QAAc,GCxBlD,CACX4H,OAAQ,CACNC,SAAS,GAEXC,OAAQ,CACNC,MAAO,CACL,CACEF,SAAS,EACTG,UAAW,CACTH,SAAS,EACTI,MAAO,WAETC,WAAY,CACVL,SAAS,EACTM,YAAatB,KAInBuB,MAAO,CACL,CACEP,SAAS,EACTG,UAAW,CACTH,SAAS,EACTI,MAAO,4BAETC,WAAY,CACVL,SAAS,EACTM,YAAarB,GAEfuB,MAAO,CACLC,UAAU,EACVC,IAAK,EACL/B,IAAKO,GAAQ,GAAMA,EAAO,QAKlCyB,qBAAqB,OCCVC,EAnCM,SAAA5K,GAKf,IAJJ6G,EAII7G,EAJJ6G,YACAgE,EAGI7K,EAHJ6K,YACAC,EAEI9K,EAFJ8K,cACAC,EACI/K,EADJ+K,eACI3G,EACgCC,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IADrEC,EAAArE,OAAAsE,EAAA,EAAAtE,CAAAmE,EAAA,GACG+E,EADH7E,EAAA,GACe0G,EADf1G,EAAA,GAWJ,OARAO,oBAAU,WACHkG,EAEMF,GACTG,EHZ4B,SAACH,EAAaI,GAC9CJ,EAAYK,QAAQ,GACpB,IAAMC,EAAK7C,EAAK2C,EAASG,GAAG/J,IAAI,SAAAgK,GAAC,OAAIpD,EAAcoD,EAAGR,MACtDM,EAAGD,QAAQ,GACX,IAAMI,EAAKhD,EAAK2C,EAASM,GAAGlK,IAAI,SAAAgK,GAAC,OAAIpD,EAAcoD,EAAGF,MAGtD,OAFAG,EAAGJ,QAAQ,GACDzC,EAAQwC,EAASO,GAAGnK,IAAI,SAAAgK,GAAC,OAAIpD,EAAcoD,EAAGC,MGMtCG,CAAmBZ,EAAaC,IAF9CE,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAI3C,CAACnE,EAAagE,EAAaC,EAAeC,IAG3C5D,EAAA/G,EAAAgH,cAAA,OAAKC,UAAU,8BAA8BC,MAAO,CAAEtC,OAAQ,MAC5DmC,EAAA/G,EAAAgH,cAAA,OAAKC,UAAU,WAAWC,MAAO,CAAEtC,OAAQ,KACxC+F,EAAc,oBAAAjI,OAETqG,EAAWuC,QAAQtJ,KAAKuG,IAAL9G,MAAAO,KAAInC,OAAA6G,EAAA,EAAA7G,CAAQkJ,KAAe,IAAM,GAChD,EACAA,EAAWuC,QAAQtJ,KAAKuG,IAAL9G,MAAAO,KAAInC,OAAA6G,EAAA,EAAA7G,CAAQkJ,KAAe,GAEpD,IAGNhC,EAAA/G,EAAAgH,cAAA,WACED,EAAA/G,EAAAgH,cAACuE,EAAD,CAAUxC,WAAYA,OC5BxByC,EAAQC,EAAQ,KAChBC,EAAQD,EAAQ,KAChBE,EAAQF,EAAQ,KA0DPG,EAxDH,WAAM,IAAA5H,EACoBC,mBAAS,MAD7BC,EAAArE,OAAAsE,EAAA,EAAAtE,CAAAmE,EAAA,GACTyC,EADSvC,EAAA,GACIL,EADJK,EAAA,GAAA2H,EAEsB5H,mBAAS,MAF/B6H,EAAAjM,OAAAsE,EAAA,EAAAtE,CAAAgM,EAAA,GAETpB,EAFSqB,EAAA,GAEIhI,EAFJgI,EAAA,GAAAC,EAG4B9H,oBAAS,GAHrC+H,EAAAnM,OAAAsE,EAAA,EAAAtE,CAAAkM,EAAA,GAGTpB,EAHSqB,EAAA,GAGOjI,EAHPiI,EAAA,GAAAC,EAI0BhI,mBAAS,CACjD+G,GAAI,KACJG,GAAI,KACJC,GAAI,OAPUc,EAAArM,OAAAsE,EAAA,EAAAtE,CAAAoM,EAAA,GAITvB,EAJSwB,EAAA,GAIMC,EAJND,EAAA,GA2BhB,OAjBAzH,oBAAU,WACRhF,EAAW+L,GAAOY,KAAK,SAAAhM,GAAQ,OAC7B+L,EAAiB,SAAAE,GACf,OAAOxM,OAAAyM,EAAA,EAAAzM,CAAA,GAAKwM,EAAZ,CAAuBrB,GAAI5K,QAG/BX,EAAWiM,GAAOU,KAAK,SAAAhM,GAAQ,OAC7B+L,EAAiB,SAAAE,GACf,OAAOxM,OAAAyM,EAAA,EAAAzM,CAAA,GAAKwM,EAAZ,CAAuBlB,GAAI/K,QAG/BX,EAAWkM,GAAOS,KAAK,SAAAhM,GAAQ,OAC7B+L,EAAiB,SAAAE,GACf,OAAOxM,OAAAyM,EAAA,EAAAzM,CAAA,GAAKwM,EAAZ,CAAuBjB,GAAIhL,SAG9B,IAED2G,EAAA/G,EAAAgH,cAAA,OAAKC,UAAU,qBACbF,EAAA/G,EAAAgH,cAAA,OAAKC,UAAU,eACbF,EAAA/G,EAAAgH,cAAA,MAAIC,UAAU,kDAAd,sBAIAF,EAAA/G,EAAAgH,cAAA,OAAKC,UAAU,mBAAf,oGAIAF,EAAA/G,EAAAgH,cAAA,OAAKC,UAAU,gDACbF,EAAA/G,EAAAgH,cAACuF,EAAD,CACE1I,aAAcA,EACdC,eAAgBA,EAChBC,kBAAmBA,IAErBgD,EAAA/G,EAAAgH,cAACwF,EAAD,CACE/F,YAAaA,EACbgE,YAAaA,EACbC,cAAeA,EACfC,eAAgBA,sBCnD5B8B,IAASC,OAAO3F,EAAA/G,EAAAgH,cAAC2F,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b993d4c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/T1.b05cf698.txt\";","module.exports = __webpack_public_path__ + \"static/media/T2.c98098b1.txt\";","module.exports = __webpack_public_path__ + \"static/media/T3.606ab021.txt\";","export const loadMatrix = file => {\r\n  const matrix = getFile(file);\r\n  return matrix;\r\n};\r\n\r\nconst getFile = async input => {\r\n  try {\r\n    const response = await fetch(input);\r\n    const text = await response.text();\r\n    const trimmedString = text.trim();\r\n    const outerArray = trimmedString.split(/\\n/);\r\n    const output = outerArray.map(row => row.split(\",\"));\r\n    return output;\r\n  } catch (e) {\r\n    console.log(e);\r\n    throw e;\r\n  }\r\n};\r\n","import { SCALE_FACTOR, CONVERTED_PIXEL_COUNT } from \"./pixelConstants\";\r\n\r\nexport const convertPixels = (image, setInputVector) => {\r\n  const grayScaleArray = image.data.filter((e, index) => (index + 1) % 4 === 0);\r\n  const scaledImage = scaler([...grayScaleArray]);\r\n  setInputVector(scaledImage);\r\n  /*\r\n   * Convert back to ImageData object\r\n   *\r\n   */\r\n  const arr = [];\r\n  for (let i = 0; i < scaledImage.length; i++) {\r\n    for (let j = 0; j < 4; j++) {\r\n      if (j !== 3) {\r\n        arr.push(0);\r\n      } else {\r\n        arr.push(scaledImage[i]);\r\n      }\r\n    }\r\n  }\r\n  const imageData = new Uint8ClampedArray(arr);\r\n\r\n  return new ImageData(imageData, CONVERTED_PIXEL_COUNT, CONVERTED_PIXEL_COUNT);\r\n};\r\n\r\nconst scaler = imageArray => {\r\n  const normalizedArray = imageArray.map(e => Math.ceil(e / 255));\r\n\r\n  /*\r\n   * Chop up into array chunks adhering to scale factor\r\n   *\r\n   */\r\n  const sixes = createMatrix(normalizedArray, SCALE_FACTOR);\r\n\r\n  /*\r\n   * Intermediary step creating a matrix each row is an array consisting of CONVERTED_PIXEL_COUNT elements and each element having the size of the scale factor\r\n   *\r\n   */\r\n  const matrixRows = createMatrix(sixes, CONVERTED_PIXEL_COUNT);\r\n\r\n  /*\r\n   * Once again reformat matrix to take the form of containing CONVERTED_PIXEL_COUNT elements in the outermost layer.\r\n   * Each one of these arrays contain the information to create one row of the converted pixel matrix\r\n   * Basically this sets up the matrix to be plucked effeciently\r\n   */\r\n  const matrix = createMatrix(matrixRows, SCALE_FACTOR);\r\n\r\n  const output = matrix.map(e => {\r\n    const convertedPixelRow = [];\r\n    for (let i = 0; i < 28; i++) {\r\n      for (let j = 0; j < e.length; j++) {\r\n        convertedPixelRow[i] = [].concat(\r\n          convertedPixelRow[i] || [],\r\n          e[j].splice(0, 1)\r\n        );\r\n      }\r\n    }\r\n    const returnValue = convertedPixelRow.map(matrix => {\r\n      return takeSumAndNormalize(matrix);\r\n    });\r\n\r\n    return returnValue;\r\n  });\r\n\r\n  /*\r\n   * Reshape matrix to correspond to how matrixes are constructed from vectors in octave (column by column instead of row by row)\r\n   *\r\n   */\r\n  const rotatedOutput = [];\r\n  for (let i = 0; i < 28; i++) {\r\n    rotatedOutput[i] = [];\r\n    output.forEach(arr => {\r\n      rotatedOutput[i].push(arr[i]);\r\n    });\r\n  }\r\n  return rotatedOutput.flat();\r\n};\r\n\r\n/*\r\n * Helper function that takes in an array and reduces it into a new array with inner arrays of size passed in as parameter 'chunkSize'\r\n *\r\n */\r\nconst createMatrix = (arr, chunkSize) => {\r\n  return arr.reduce((all, currentValue, index) => {\r\n    const chunk = Math.floor(index / chunkSize);\r\n    if (!all[chunk]) all[chunk] = [];\r\n    all[chunk].push(currentValue);\r\n    return all;\r\n  }, []);\r\n};\r\n\r\n/*\r\n * Custum function calculates the sum of a nested array and converts the binary pixel values back into grayscale\r\n *\r\n */\r\nconst takeSumAndNormalize = arr => {\r\n  const subSums = arr.map(e => {\r\n    return e.reduce((accum, currentValue) => accum + currentValue);\r\n  });\r\n  const finalSum = subSums.reduce(\r\n    (accum, currentValue) => accum + currentValue\r\n  );\r\n\r\n  return finalSum / 36;\r\n};\r\n","export const ORIGIN_PIXEL_COUNT = 168;\r\nexport const CONVERTED_PIXEL_COUNT = 28;\r\nexport const SCALE_FACTOR = ORIGIN_PIXEL_COUNT / CONVERTED_PIXEL_COUNT;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { convertPixels } from \"../utility/pixelConverter\";\r\nimport { ORIGIN_PIXEL_COUNT } from \"../utility/pixelConstants\";\r\n\r\nconst Canvas = ({ setImageData, setInputVector, setShowPrediction }) => {\r\n  const [painting, setPainting] = useState(false);\r\n  const digitCanvas = useRef(null);\r\n  const ctx = useRef(null);\r\n\r\n  useEffect(() => {\r\n    digitCanvas.current.width = ORIGIN_PIXEL_COUNT;\r\n    digitCanvas.current.height = ORIGIN_PIXEL_COUNT;\r\n    ctx.current = digitCanvas.current.getContext(\"2d\");\r\n  }, []);\r\n\r\n  const startPosition = e => {\r\n    setPainting(true);\r\n    const pos = getMousePos(e);\r\n    ctx.current.lineTo(pos.x, pos.y);\r\n    ctx.current.stroke();\r\n  };\r\n\r\n  const finishedPosition = () => {\r\n    setPainting(false);\r\n    ctx.current.beginPath();\r\n    parseImage(\r\n      ctx.current.getImageData(0, 0, ORIGIN_PIXEL_COUNT, ORIGIN_PIXEL_COUNT)\r\n    );\r\n  };\r\n\r\n  const getMousePos = e => {\r\n    const rect = digitCanvas.current.getBoundingClientRect();\r\n    return {\r\n      x: e.clientX - rect.left,\r\n      y: e.clientY - rect.top\r\n    };\r\n  };\r\n\r\n  const draw = e => {\r\n    if (!painting) return;\r\n    const pos = getMousePos(e);\r\n    ctx.current.lineWidth = 12;\r\n    ctx.current.lineCap = \"round\";\r\n    ctx.current.strokeStyle = \"black\";\r\n    ctx.current.lineTo(pos.x, pos.y);\r\n    ctx.current.stroke();\r\n    ctx.current.beginPath();\r\n    ctx.current.moveTo(pos.x, pos.y);\r\n  };\r\n\r\n  const parseImage = image => {\r\n    const convertedImage = convertPixels(image, setInputVector);\r\n    setShowPrediction(true);\r\n    setImageData(convertedImage);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"flex flex-col justify-center\"\r\n      style={{height: 240}}\r\n    >\r\n      <canvas\r\n        className=\"myCanvas\"\r\n        ref={digitCanvas}\r\n        onMouseDown={e => startPosition(e)}\r\n        onMouseUp={() => finishedPosition()}\r\n        onMouseMove={e => draw(e)}\r\n        onTouchStart={e => startPosition(e)}\r\n        onTouchEnd={() => finishedPosition()}\r\n        onTouchMove={e => draw(e)}\r\n      />\r\n      <div>\r\n        <button\r\n          className=\"btn btn-green\"\r\n          style={{ margin: 10 }}\r\n          onClick={() => {\r\n            ctx.current.clearRect(0, 0, ORIGIN_PIXEL_COUNT, ORIGIN_PIXEL_COUNT);\r\n            setShowPrediction(false);\r\n          }}\r\n        >\r\n          Erase\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","/*\r\n * Forward prop for network trained with dropout\r\n */\r\n\r\nexport const forwardPropagation = (inputVector, matrices) => {\r\n  inputVector.unshift(1);\r\n  const A1 = relu(matrices.T1.map(v => scalarProduct(v, inputVector)));\r\n  A1.unshift(1);\r\n  const A2 = relu(matrices.T2.map(v => scalarProduct(v, A1)));\r\n  A2.unshift(1);\r\n  const H = softmax(matrices.T3.map(v => scalarProduct(v, A2)));\r\n  return H;\r\n};\r\n\r\nconst scalarProduct = (vector1, vector2) => {\r\n  if (vector1.length !== vector2.length)\r\n    throw new Error(\"Vectors must have the same length\");\r\n\r\n  let result = 0;\r\n\r\n  for (let i = 0; i < vector1.length; i++) {\r\n    result = result + vector1[i] * vector2[i];\r\n  }\r\n  return result;\r\n};\r\n\r\nconst relu = vector => {\r\n  return vector.map(element => {\r\n    if (element > 0) return element;\r\n    return element * 0.01;\r\n  });\r\n};\r\n\r\nconst softmax = vector => {\r\n  const maxValue = Math.max(...vector);\r\n  const logVector = vector.map(element => Math.exp(element - maxValue));\r\n  const sumOfLogVector = logVector.reduce(\r\n    (accum, currentValue) => accum + currentValue\r\n  );\r\n  return logVector.map(element => element / sumOfLogVector);\r\n};\r\n\r\n/* console.log(\r\n  forwardPropagation([-1, 2, -2, -3], {\r\n    T1: [[1, 2, 2, 3, 2], [1, 2, 3, 4, 3]],\r\n    T2: [[1, 1, 3], [1, 1, 3]],\r\n    T3: [[2, 2, 3], [2, 2, 3]]\r\n  })\r\n); */\r\n","import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { options } from \"./options\";\r\n\r\nconst BarChart = ({ prediction }) => {\r\n  return (\r\n    <Bar\r\n      data={{\r\n        labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0],\r\n        datasets: [\r\n          {\r\n            label: \"Probability\",\r\n            backgroundColor: \"rgba(33,186,69,0.2)\",\r\n            borderColor: \"rgba(33,186,69,1)\",\r\n            borderWidth: 1,\r\n            defaultFontColor: \"#cccccc\",\r\n            hoverBackgroundColor: \"rgba(33,186,69,0.4)\",\r\n            hoverBorderColor: \"rgba(33,186,69,1)\",\r\n            data: prediction.map(e => Math.floor(e * 100))\r\n          }\r\n        ]\r\n      }}\r\n      options={options(\r\n        null,\r\n        null,\r\n        Math.max(...prediction.map(e => Math.floor(e * 100))) || 90\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n","export const options = (xlabel, ylabel, maxY) => {\r\n  const opts = {\r\n    legend: {\r\n      display: false\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          display: true,\r\n          gridLines: {\r\n            display: false,\r\n            color: \"#cccccc\"\r\n          },\r\n          scaleLabel: {\r\n            display: false,\r\n            labelString: xlabel\r\n          }\r\n        }\r\n      ],\r\n      yAxes: [\r\n        {\r\n          display: true,\r\n          gridLines: {\r\n            display: false,\r\n            color: \"rgba(204, 204, 204, 0.5)\"\r\n          },\r\n          scaleLabel: {\r\n            display: false,\r\n            labelString: ylabel\r\n          },\r\n          ticks: {\r\n            autoSkip: false,\r\n            min: 0,\r\n            max: maxY + (10 - (maxY % 10))\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    maintainAspectRatio: false\r\n  };\r\n  return opts;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { forwardPropagation } from \"../utility/ForwardPropagation\";\r\nimport BarChart from \"./BarChart\";\r\n\r\nconst OutputCanvas = ({\r\n  scaledImage,\r\n  inputVector,\r\n  thetaMatrices,\r\n  showPrediction\r\n}) => {\r\n  const [prediction, setPrediction] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n\r\n  useEffect(() => {\r\n    if (!showPrediction) {\r\n      setPrediction([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n    } else if (inputVector) {\r\n      setPrediction(forwardPropagation(inputVector, thetaMatrices));\r\n    }\r\n  }, [scaledImage, inputVector, thetaMatrices, showPrediction]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col justify-start\" style={{ height: 240 }}>\r\n      <div className=\"text-3xl\" style={{ height: 50 }}>\r\n        {showPrediction\r\n          ? `Predicted digit: ${\r\n              prediction.indexOf(Math.max(...prediction)) + 1 === 10\r\n                ? 0\r\n                : prediction.indexOf(Math.max(...prediction)) + 1\r\n            }`\r\n          : \"\"}\r\n      </div>\r\n\r\n      <div>\r\n        <BarChart prediction={prediction} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OutputCanvas;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { loadMatrix } from \"../utility/LoadMatrix\";\r\nimport Canvas from \"./Canvas\";\r\nimport OutputCanvas from \"./OutputCanvas\";\r\n\r\nconst file1 = require(\"../resources/T1.txt\");\r\nconst file2 = require(\"../resources/T2.txt\");\r\nconst file3 = require(\"../resources/T3.txt\");\r\n\r\nconst App = () => {\r\n  const [scaledImage, setImageData] = useState(null);\r\n  const [inputVector, setInputVector] = useState(null);\r\n  const [showPrediction, setShowPrediction] = useState(false);\r\n  const [thetaMatrices, setThetaMatrices] = useState({\r\n    T1: null,\r\n    T2: null,\r\n    T3: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadMatrix(file1).then(response =>\r\n      setThetaMatrices(prevState => {\r\n        return { ...prevState, T1: response };\r\n      })\r\n    );\r\n    loadMatrix(file2).then(response =>\r\n      setThetaMatrices(prevState => {\r\n        return { ...prevState, T2: response };\r\n      })\r\n    );\r\n    loadMatrix(file3).then(response =>\r\n      setThetaMatrices(prevState => {\r\n        return { ...prevState, T3: response };\r\n      })\r\n    );\r\n  }, []);\r\n  return (\r\n    <div className=\"container mx-auto\">\r\n      <div className=\"text-center\">\r\n        <h1 className=\"bg-green-500 m-6 p-6 rounded shadow-lg text-lg\">\r\n          Predict the digit!\r\n        </h1>\r\n\r\n        <div className=\"text-base mb-12\">\r\n          Write a single digit in the box and see if the neural network can\r\n          predict which number you drew.\r\n        </div>\r\n        <div className=\"flex flex-wrap justify-center content-center\">\r\n          <Canvas\r\n            setImageData={setImageData}\r\n            setInputVector={setInputVector}\r\n            setShowPrediction={setShowPrediction}\r\n          />\r\n          <OutputCanvas\r\n            scaledImage={scaledImage}\r\n            inputVector={inputVector}\r\n            thetaMatrices={thetaMatrices}\r\n            showPrediction={showPrediction}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./css/tailwind.css\";\r\nimport \"./css/app.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}